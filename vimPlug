call plug#begin('~/.local/share/nvim/plugged')
" make search great again
Plug 'haya14busa/incsearch.vim'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-surround'
Plug 'w0rp/ale'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" fix cursor shape
Plug 'jszakmeister/vim-togglecursor'
" fuGITve
Plug 'tpope/vim-fugitive'
" elm
Plug 'elmcast/elm-vim'
Plug 'bitterjug/vim-tagbar-ctags-elm'
"  haskell
Plug 'neovimhaskell/haskell-vim'
Plug 'parsonsmatt/intero-neovim'
Plug 'alx741/vim-hindent'
Plug 'eagletmt/neco-ghc'
" go
Plug 'fatih/vim-go', { 'for': 'go' }
call plug#end()
" roll with less colors 
set t_Co=16
" set Vim-specific sequences for RGB colors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
" theme overwrites
highlight Comment cterm=italic
hi TabLineFill cterm=none ctermfg=red
hi TabLine     cterm=none ctermfg=white
hi TabLineSel  cterm=bold ctermfg=red
hi StatusLineNC   ctermbg=15  ctermfg=16 guifg=white guibg=#000000
hi VertSplit   ctermbg=15  ctermfg=16 guifg=white guibg=#000000
hi SignColumn   ctermbg=16  ctermfg=16 guifg=white guibg=#000000
hi StatusLine   ctermbg=red ctermfg=16 guifg=orange guibg=#000000
hi CursorLine term=none cterm=none ctermbg=0
" serch mappings
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
" pop list open and use quickfix
let g:ale_set_quickfix= 1
let g:ale_open_list = 1
let g:airline#extensions#ale#enabled=0
"fzf{{{
" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
" complete word from dictionary
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})
imap <c-x><c-p> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

nnoremap <silent>; :Commands <cr>
nnoremap <silent> <leader>f :Files<CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>W :Windows<CR>
nnoremap <silent> <leader>; :BLines<CR>
nnoremap <silent> <leader>. :Lines<CR>
nnoremap <silent> <leader>o :BTags<CR>
nnoremap <silent> <leader>O :Tags<CR>
nnoremap <silent> <leader>? :History<CR>
" seach current dir with Ag
nnoremap <silent> <leader>/ :execute 'Ag ' . input('Ag/')<CR> <CR>
nnoremap <silent> <leader>gl :Commits<CR>
nnoremap <silent> <leader>gb :BCommits<CR>
" todo and notes fzf powered
" open task list for todo in current folder and subfolder
noremap <Leader>tl  :Ag TODO <CR>
" open task list for note in current folder and subfolder
noremap <Leader>nl :Ag NOTE <CR>
" open diff
nnoremap <leader>gd :Gdiff<CR>
" add current file
nnoremap <leader>ga :Git add %:p<CR><CR>
" status
nnoremap <leader>gs :Gstatus<CR>
" commit added files
nnoremap <leader>gc :Gcommit -q -v<CR>
" add and commit current file
nnoremap <leader>gt :Gcommit -v -q  %:p<CR>
"}}}
"elm {{{
let g:elm_setup_keybindings = 0
let g:elm_detailed_complete = 1
au FileType elm nmap <leader>B <Plug>(elm-make)
au FileType elm nmap <leader>m <Plug>(elm-make-main)
au FileType elm nmap <leader>t <Plug>(elm-test)
au FileType elm nmap <leader>r <Plug>(elm-repl)
au FileType elm nmap <leader>e <Plug>(elm-error-detail)
au FileType elm nmap <leader>d <Plug>(elm-show-docs)
au FileType elm nmap <leader>w <Plug>(elm-browse-docs)
let g:elm_format_autosave = 1
au BufNewFile,BufRead *.elm setlocal noet ts=2 sw=2 sts=2 expandtab
"}}}
"go{{{
let g:ale_linters = {'go': ['go build','gofmt']}
" open in term
let g:go_term_enabled = 1
let g:go_term_mode = "vsplit"
" fold by sytax and style
" set style for go files
au FileType go set foldmethod=indent foldnestmax=10
au FileType go set nolist
" match gofmt style
au BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4
"Show a list of interfaces which is implemented by the type under your cursor with <leader>s
au FileType go nmap <Leader>s <Plug>(go-implements)
"Show type info for the word under your cursor with <leader>i (useful if you have disabled auto showing type info via g:go_auto_type_info)
au FileType go nmap <Leader>i <Plug>(go-info)
"Open the relevant Godoc for the word under the cursor with <leader>do or open it vertically with <leader>d
"au FileType go nmap <Leader>do<Plug>(go-doc)<cr><C-w>k<cr>
"au FileType go nmap <Leader>dh<Plug>(go-doc-vertical)<cr><C-w>h<cr>
"Or open the Godoc in browser
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
"Run commands, such as go run with <leader>r for the current file or go build and go test for the current package with <leader>b and <leader>t. Display a beautiful annotated source code to see which functions are covered with <leader>c.
au FileType go nmap <leader>r <Plug>(go-run)
"avoid clash with unite buffer navigator
au FileType go nmap ;b <Plug>(go-build)
au FileType go nmap ;t <Plug>(go-test)
au FileType go nmap ;c <Plug>(go-coverage)
"By default the mapping gd is enabled which opens the target identifier in current buffer. You can also open the definition/declaration in a new vertical, horizontal or tab for the word under your cursor:
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
" Rename the identifier under the cursor to a new name
au FileType go nmap <Leader>e <Plug>(go-rename)
" auto import stuff
let g:go_fmt_command = "goimports"
" tabar tags
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }
" remove this is annyoing as fuck let g:go_auto_sameids = 1
let g:go_auto_type_info = 1
"}}}
"" haskell {{{
let g:ale_linters.haskell = ['stack-ghc-mod', 'hlint']
" Use ALE (works even when not using Intero)
let g:intero_use_neomake = 0

let g:necoghc_use_stack=1
let g:necoghc_debug=1
let g:haskellmode_completion_ghc = 1
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
"This unsets the last search pattern register by hitting return
" becasue incsearch does not work with nvim
nnoremap <CR> :noh<CR><CR>
" }}}
" vim: foldmethod=marker sw=4 ts=4 sts=4 et tw=78 ft=vim
