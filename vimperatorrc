" OPTION {{{
  " default colorscheme
  set titlestring=www
  set popups=tab
  " complete search engine suguest
  set complete=lsb
  " use home row letters for hints instead of numbers
  set hintchars=sadfjklewcmpgh
  " only follow hints when press enter
 " set followhints=1
  " open things at new tab
  set newtab=all
  " highlight all search matches, not just the first
  set hlsearch
  " find as you type
  set incsearch
  " ignorecase
  set ignorecase
  " set wild mode to show completions as you type
  set wildmode=list:longest,full
  " turn off the freakin' bell
  set novisualbell
 " remove the chrome
  set gui=none,tabs
  " enable animation
  set animations
  set editor='bash -lc "mvim -f \$*" mvim '
" }}}
" MAPPING {{{
  map , <Leader>
  " unset maps
  nmap w <Nop>
  nmap W <Nop>
  nmap d <Nop>
  nmap u <Nop>
  nmap a <Nop>
  " movement
  nmap j 5<Down>
  nmap k 10<Up>
  " vimium like keymap
  nmap d <C-d>
  nmap u <C-u>
  nmap J :tabprevious<CR>
  nmap K :tabnext<CR>
  nmap x :quit<CR>
  nmap X :undo<CR>
  " disable highlight
  map <Leader>/ :set hlf!<CR>
  " yank selected text to clipboard
  nmap Y <yank-selection>
  " open addons manager
  nmap <Leader>a :dialog addons<CR>
  " private mode
  nmap <Leader>p :set private!<CR>
  " add bookmarks
  nmap <Leader>d :dialog addbookmark<CR>
  " history
  nmap <Leader>h :history<CR>
  " list closed tabs
  nmap <Leader>u :undo<Space>
  " list bookmarks
  nmap <Leader>b :bmarks<Space>
" }}}
" BOOKMARKS {{{
  " search engines
  "silent bma -tags searchengine -title 'Amazon' http://www.amazon.com/exec/obidos/external-search/?field-keywords=%s&mode=blended&tag=mozilla-20&sourceid=Mozilla-search -k a
  "silent bma -tags searchengine -title 'ArchLinux AUR' http://aur.archlinux.org/packages.php?O=0&L=0&C=0&K=%s&SeB=nd&PP=25 -k aur
  "silent bma -tags searchengine -title 'ArchLinux Wiki' http://wiki.archlinux.org/index.php?search=%s -k aw
  "silent bma -tags searchengine -title 'DeviantART' http://browse.deviantart.com/?qh=&section=&q=%s -k da
  "silent bma -tags searchengine -title 'DuckDuckGo' https://duckduckgo.com/?q=%s -k ddg
  "silent bma -tags searchengine -title 'Google Search' https://www.google.com/search?q=%s -k g
  "silent bma -tags searchengine -title 'Google Translate' http://translate.google.com/#auto|pt|%s -k gt
  "silent bma -tags searchengine -title 'ThePirateBay' http://thepiratebay.se/search/%s -k pb
  "silent bma -tags searchengine -title 'Twitter' https://twitter.com/search/%s -k t
  "silent bma -tags searchengine -title 'Wikipedia' http://pt.wikipedia.org/wiki/Special:Search?search=%s -k w
  "silent bma -tags searchengine -title 'Wolfram Alpha' http://www.wolframalpha.com/input/?i=%s -k wa
  "silent bma -tags searchengine -title 'Youtube' http://www.youtube.com/results?search_query=%s -k yt
" }}}
" QUICKMARKS {{{
  "qmark d http://www.tumblr.com/dashboard
  "qmark m https://mail.google.com
  "qmark r https://www.google.com/reader
  "qmark t https://twitter.com
  "qmark y https://www.youtube.com
" }}}
" SEARCHING {{{
  " from http://www.slimeden.com/2011/03/firefox/pentadactyl
  ":map t -js content.getSelection().toString()!=""?dactyl.execute(":tabopen "+ content.getSelection()):CommandExMode().open("tabopen ")
  ":map o -js content.getSelection().toString()!=""?dactyl.execute(":open "+ content.getSelection()):CommandExMode().open("open ")
  command! -nargs=* -complete=search search execute 'tabopen <args> ' + content.getSelection().toString()
  map s :search<Space>
  command! -nargs=? -complete=search switchSearch execute 'open <args> ' + (buffer.lastInputField?buffer.lastInputField.value:'')
  map S gi<ESC> :switchSearch<Space>
  command! -nargs=* siteSearch execute "tabopen <args> site:" + window.content.location.hostname

  " hide all browser search engines except Google(for suggestion)
  "js services.browserSearch.getEngines().forEach(function (e) {if(e.name!="Google") e.hidden = true})

  "Searching: use DuckDuckGo
  "set defsearch=ddg
" }}}
" IGNOREKEYS {{{
  ignorekeys add 'mail.google.com'
  ignorekeys add 'drive.google.com'
  ignorekeys add 'www.google.com/calendar'
  ignorekeys add 'www.google.com/reader'
"}}}
" THEME {{{
hi Normal background: #121112; color:#D0CFD0;
hi CmdLine background: #121112; color:#D0CFD0;
hi CompGroup background: #121112; color:#D0CFD0;
hi CompTitle background: #1c1b1c; font-weight: bold;
hi CompTitle>* color: #D0CFD0; padding: 1px 0.5ex;
hi CompItem background:#121112; color:#D0CFD0;
hi CompItem[selected] color: #77438F; background: #262426;
hi CompDesc width: 500px; max-width: 500px; color: #465457;
hi CompMsg margin-left: 16px;
hi ErrorMsg background: #D7005F; color: #D0CFD0; font-weight: bold;
hi Filter color: #77438F; background: #262426;
hi StatusLine color: #D0CFD0; background: transparent; font-weight: normal;
hi Hint font-family: terminus; font-size: 9px; font-weight: bold; color: white; background-color: red; border-color: ButtonShadow; border-width: 0px; border-style: solid; padding: 0px 1px 0px 1px;
hi Hint::after content: attr(number);
hi HintActive background-color: #88FF00; color: black;
hi HintElem background-color: yellow; color: black;
hi HintImage opacity: .5;
hi URL text-decoration: none; color: #87FF00;
hi ModeMsg color: white; background: #3E6700; border-radius: 1px; padding: 0px 5px;
hi PromptText color: white; background: #860EFF;
hi MoreMsg background-color: #121112; color: #87FF00;
hi Tag color: #005F87;
hi InfoMsg background: #121112; color: #87FF00;
hi WarningMsg background: #121112; color: #D7005F;
hi Null color: #005F87;
hi Number color: #005F87;
hi NonText color: #B973FF; min-height: 16px; padding-left: 2px;
hi Title background-color: #D7005F; color: #D0CFD0; font-weight: bold;
hi Indicator color: #D7005F;
  hi Hint               text-transform: uppercase; font-family : "Helvetica Neue", "Helvetica", "Arial", "Sans"; font-weight: bold; font-size: 11px; text-shadow: 0 1px 0 rgba(255, 255, 255, 0.6); color: #302505; padding: 1px 3px 0px 3px; background: -moz-linear-gradient(top, #FFF785, #FFC542); border: 1px #E3BE23 solid; border-radius: 2px; -moz-box-shadow: 0 3px 7px 0px rgba(0,0,0,0.3);
  hi HintElem           background-color: inherit !important;
  hi HintActive	        background-color: inherit !important;
  hi HintImage          opacity: .7 !important;
" }}}
"{{{
 mappings.addUserMap(
    [modes.NORMAL], ["<C-w>e"], "tile tabs vertically",
    function() {tileTabs.menuActions('new-2vert',null);}
    ); 
"}}}"
" TESTING SMOOTH SCROLL {{{
let self = liberator.plugins.smooziee = (function(){

    var scroll_amount = liberator.globalVariables.smooth_scroll_amount || '30';

    mappings.addUserMap(
        [modes.NORMAL],
        ["j"],
        "Smooth scroll down",
        function(count){
            self.smoothScrollBy(getScrollAmount(scroll_amount * (count || 1)));
        },
        {
            count: true
        }
        );
    mappings.addUserMap(
        [modes.NORMAL],
        ["k"],
        "Smooth scroll up",
        function(count){
            self.smoothScrollBy(getScrollAmount(scroll_amount * (count || 1)) * -1);
        },
        {
            count: true
        }
        );
    mappings.addUserMap(
        [modes.NORMAL],
        ["<C-d>"],
        "Smooth scroll down",
        function(count){
            self.smoothScrollBy(getScrollAmount((screen.height / 4) * (count || 1)));
        },
        {
            count: true
        }
        );
    mappings.addUserMap(
        [modes.NORMAL],
        ["<C-u>"],
        "Smooth scroll up",
        function(count){
            self.smoothScrollBy(getScrollAmount((screen.height / 4) * (count || 1)) * -1);
        },
        {
            count: true
        }
        );
    mappings.addUserMap(
        [modes.NORMAL],
        ["<C-f>"],
        "Smooth scroll down",
        function(count){
            self.smoothScrollBy(getScrollAmount((screen.height / 2) * (count || 1)));
        },
        {
            count: true
        }
        );
    mappings.addUserMap(
        [modes.NORMAL],
        ["<C-b>"],
        "Smooth scroll up",
        function(count){
            self.smoothScrollBy(getScrollAmount((screen.height / 2) * (count || 1)) * -1);
        },
        {
            count: true
        }
        );

    var next;
    var win;
    var interval;

    var PUBLICS = {
        smoothScrollBy: function(moment) {
            win = Buffer.findScrollableWindow();
            interval = window.eval(liberator.globalVariables.smooth_scroll_interval || '20');
            clearTimeout(next);
            smoothScroll(moment);
        }
    }

    function logBase(x, y) {
        // Logarithm of arbitrary base `x`
        return Math.log(y) / Math.log(x);
    }

    function getScrollAmount(amount) {
        // see recognition of Fibonacci Numbers (here approximation is used)
        // http://en.wikipedia.org/wiki/Fibonacci_number#Recognizing_Fibonacci_numbers
        phi = 1.618033;
        sqrt5 = 2.236067;
        fn = amount
            n = Math.ceil(logBase(phi, (fn * sqrt5 + Math.sqrt(5 * Math.pow(fn, 2) + 4)) / 2))
            return window.eval(n);
    }

    function fib(n){
        // see optimized Binet's formula for Fibonacci sequence
        // http://en.wikipedia.org/wiki/Fibonacci_number#Closed_form_expression
        phi = 1.618033;
        sqrt5 = 2.236067;
        return Math.floor((Math.pow(phi, n) / sqrt5) + 0.5)
    }

    function smoothScroll(moment) {
        if (moment > 0) {
            moment = moment - 1;
            win.scrollBy(0, fib(Math.abs(moment)));
        } else {
            moment = moment + 1;
            win.scrollBy(0, -fib(Math.abs(moment)));
        }

        if (moment == 0)
            return;

        next = setTimeout(function() smoothScroll(moment), interval);
    }

    return PUBLICS;
})();


"}}}
" vim: set fdm=marker:
